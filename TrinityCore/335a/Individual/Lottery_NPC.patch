From 9f8f7ce11e49f044f8ba328cb83196da0d7606cb Mon Sep 17 00:00:00 2001
From: LordPsyan <realmsofwarcraft@gmail.com>
Date: Wed, 24 Sep 2014 07:43:48 -0400
Subject: [PATCH] Lottery_NPC

---
 sql/TrinityCore-Patches/Lotto/world.lottery.sql |  44 +++
 src/server/game/Miscellaneous/Language.h        |   6 +-
 src/server/game/Scripting/ScriptLoader.cpp      |   6 +-
 src/server/scripts/Custom/npc_lottery.cpp       | 362 ++++++++++++++++++++++++
 4 files changed, 413 insertions(+), 5 deletions(-)
 create mode 100644 sql/TrinityCore-Patches/Lotto/world.lottery.sql
 create mode 100644 src/server/scripts/Custom/npc_lottery.cpp

diff --git a/sql/TrinityCore-Patches/Lotto/world.lottery.sql b/sql/TrinityCore-Patches/Lotto/world.lottery.sql
new file mode 100644
index 0000000..0e89d15
--- /dev/null
+++ b/sql/TrinityCore-Patches/Lotto/world.lottery.sql
@@ -0,0 +1,44 @@
+DELETE FROM `trinity_string` where `entry` IN ('11010', '11011', '11012');
+INSERT INTO `trinity_string` (`entry`, `content_default`) VALUES ('11010', '|cffff0000[Lottery]: The contest is over! Total bets involved: %u. The winning numbers: %s. The Jackpot contains %u gold and was not paid.|r');
+INSERT INTO `trinity_string` (`entry`, `content_default`) VALUES ('11011', '|cffff0000[Lottery]: The contest is over! Total bets involved: %u. The winning numbers: %s.  %s hit the Jackpot and wins %u gold! Congratulations!|r');
+INSERT INTO `trinity_string` (`entry`, `content_default`) VALUES ('11012', '|cffff0000[Lottery]: The contest is over! Total bets involved: %u. The winning numbers: %s.  %u players hit the Jackpot and everyone wins %u gold. Congratulations!|r');
+
+DROP TABLE IF EXISTS `lottery_winners`;
+CREATE TABLE `lottery_winners` (
+  `id` int(10) unsigned NOT NULL,
+  `name` varchar(12) NOT NULL,
+  `guid` int(10) unsigned NOT NULL DEFAULT '0',
+  `bet` longtext NOT NULL,
+  `betPoints` int(10) unsigned NOT NULL DEFAULT '0',
+  `time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
+) ENGINE=MyISAM DEFAULT CHARSET=utf8;
+
+
+DROP TABLE IF EXISTS `lottery_bets`;
+CREATE TABLE `lottery_bets` (
+  `id` int(10) unsigned NOT NULL DEFAULT '1',
+  `name` varchar(12) NOT NULL,
+  `guid` int(10) unsigned NOT NULL DEFAULT '0',
+  `bet` longtext NOT NULL,
+  `time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
+  PRIMARY KEY (`id`)
+) ENGINE=MyISAM DEFAULT CHARSET=utf8;
+
+
+DROP TABLE IF EXISTS `lottery`;
+CREATE TABLE `lottery` (
+  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
+  `numbers` longtext NOT NULL,
+  `jackpot` int(10) unsigned NOT NULL DEFAULT '0',
+  `time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
+  PRIMARY KEY (`id`)
+) ENGINE=MyISAM AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;
+
+
+REPLACE INTO `game_event` (`eventEntry`, `start_time`, `end_time`, `occurence`, `length`, `holiday`, `description`, `world_event`, `announce`) VALUES
+(132, '2013-08-21 20:00:00', '2020-12-31 06:00:00', 1440, 1, 0, 'Lottery', 0, 2);
+
+
+DELETE FROM `creature_template` WHERE (`entry`=900010);
+INSERT INTO `creature_template` (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `dmgschool`, `BaseAttackTime`, `RangeAttackTime`, `BaseVariance`, `RangeVariance`, `unit_class`, `unit_flags`, `unit_flags2`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `HoverHeight`, `HealthModifier`, `ManaModifier`, `ArmorModifier`, `DamageModifier`, `ExperienceModifier`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `VerifiedBuild`) VALUES
+('900010', '0', '0', '0', '0', '0', '7993', '0', '0', '0', 'Lotty', '- by GoN -', NULL, '0', '80', '80', '0', '35', '1', '1', '1.14286', '0.75', '0', '0', '1400', '1900', '1', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '7', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '', '1', '3', '1', '1', '1', '1', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', 'npc_lottery', '12340');
diff --git a/src/server/game/Miscellaneous/Language.h b/src/server/game/Miscellaneous/Language.h
index 327a7a7..a473447 100644
--- a/src/server/game/Miscellaneous/Language.h
+++ b/src/server/game/Miscellaneous/Language.h
@@ -1233,9 +1233,9 @@ enum TrinityStrings
     // 35
     // 36
     // 37
-    // 38
-    // 39
-    // 40
+   LANG_LOTTERY_ANNOUNCE_JACKPOT = 11010,
+   LANG_LOTTERY_ANNOUNCE_JACKPOT_M_PLAYERS = 11011,
+   LANG_LOTTERY_ANNOUNCE = 11012
     // Visit http://www.realmsofwarcraft.com/bb for forums and information
     //
     // End of prepatch
diff --git a/src/server/game/Scripting/ScriptLoader.cpp b/src/server/game/Scripting/ScriptLoader.cpp
index 8d5350b..99380f6 100644
--- a/src/server/game/Scripting/ScriptLoader.cpp
+++ b/src/server/game/Scripting/ScriptLoader.cpp
@@ -1443,7 +1443,8 @@ void AddBattlegroundScripts()
 // start26
 // start27
 // start28
-// start29
+    // Lottery NPC
+    void AddSC_npc_lottery();
 // start30
 // start31
 // start32
@@ -1529,7 +1530,8 @@ void AddCustomScripts()
 // end26
 // end27
 // end28
-// end29
+// Lottery NPC
+AddSC_npc_lottery();
 // end30
 // end31
 // end32
diff --git a/src/server/scripts/Custom/npc_lottery.cpp b/src/server/scripts/Custom/npc_lottery.cpp
new file mode 100644
index 0000000..486758f
--- /dev/null
+++ b/src/server/scripts/Custom/npc_lottery.cpp
@@ -0,0 +1,362 @@
+/*
+ *
+ * Copyright (C) 2013 Emu-Devstore <http://emu-devstore.com/>
+ * Written by Teiby <http://www.teiby.de/>
+ *
+ */
+
+
+#include "ScriptPCH.h"
+#include "Config.h"
+#include "Language.h"
+
+#define EVENT_LOTTERY        132 // Use '.event start 132' or '.event stop 132' to start and stop manually. Event will start automatically every 24h (08:00pm)
+
+#define LOTTERY_ENABLE        true
+#define LOTTERY_MINLVL        1
+#define LOTTERY_BETCOST        10    * 10000 // 10 Gold
+#define LOTTERY_MAXNUMBER    30    // 1 - 30
+#define LOTTERY_FIELDS        5    // how many numbers? (e.g. '5 10 22 3 25')
+#define LOTTERY_BETCOUNT    1    // how many bets each player?
+
+
+class npc_lottery : public CreatureScript
+{
+public:
+    npc_lottery() : CreatureScript("npc_lottery") { }
+
+    bool OnGossipHello(Player* player, Creature* pCreature)
+    {
+        if (player && LOTTERY_ENABLE)
+        {
+            if (player->getLevel() >= uint32(LOTTERY_MINLVL) && player->GetMoney() >= uint32(LOTTERY_BETCOST))
+            {
+                std::stringstream str;
+                str << "Willst du dein GlÃ¼ck versuchen? " << LOTTERY_FIELDS << " Nummern zwischen 1 und " << LOTTERY_MAXNUMBER << " (durch Leerzeichen trennen), bezahle " << (uint32)(LOTTERY_BETCOST*0.0001f) << " Gold und warte auf die Auslosung (20:00).";
+                str << " Du kannst nur " << LOTTERY_BETCOUNT << " Los kaufen" << (LOTTERY_BETCOUNT > 1 ? "s." : ".");
+
+
+                pCreature->Whisper(str.str().c_str(), LANG_UNIVERSAL, player);
+                player->ADD_GOSSIP_ITEM_EXTENDED(0, "Kaufe ein Los", GOSSIP_SENDER_MAIN, GOSSIP_ACTION_INFO_DEF, "", 0, true);
+                player->ADD_GOSSIP_ITEM(GOSSIP_ICON_CHAT, "Script Info", GOSSIP_SENDER_MAIN, 9998);
+                player->SEND_GOSSIP_MENU(player->GetGossipTextId(pCreature), pCreature->GetGUID());
+            }
+            else
+           {
+                std::stringstream str;
+                str << "Du brauchst " << LOTTERY_MINLVL << " Gold and Level " << (uint32)(LOTTERY_BETCOST*0.0001f) << "+ um ein Los zu kaufen.";
+                pCreature->Whisper(str.str().c_str(), LANG_UNIVERSAL, player);
+            }
+        }
+        return true;
+    }
+
+    bool OnGossipSelectCode(Player* player, Creature* pCreature, uint32 uiSender, uint32 uiAction, const char* code)
+    {
+        player->PlayerTalkClass->ClearMenus();
+       if (uiSender == GOSSIP_SENDER_MAIN)
+        {
+            switch (uiAction)
+           {
+                case GOSSIP_ACTION_INFO_DEF:
+                {
+                   char * charCode = (char*)code;
+                    std::string strCode = (char*)code;
+                    char * tmp;
+                   int32 number[LOTTERY_FIELDS];
+                    std::stringstream error;
+                    error << "Du hast eine falsche Nummer eingegeben. Du musst " << LOTTERY_FIELDS << " Nummer (durch Leerzeichen trennen) zwischen 1 - " << LOTTERY_MAXNUMBER << "eingeben.";
+                    std::string errordub = ("Du hast schon getipt");
+                    std::string sNumbers;
+
+
+                    QueryResult pBetGuid = WorldDatabase.PQuery("SELECT COUNT(*) FROM lottery_bets WHERE guid = %u", player->GetGUIDLow());
+                    if (pBetGuid && pBetGuid->Fetch()->GetUInt32() >= LOTTERY_BETCOUNT)
+                    {
+                        pCreature->Whisper(errordub.c_str(), LANG_UNIVERSAL, player);
+                        player->CLOSE_GOSSIP_MENU();
+                        return false;
+                    }
+
+
+                    tmp = strtok (charCode," ");
+                    for (int8 n = 0; n < LOTTERY_FIELDS; n++)
+                    {
+                        if (tmp != NULL)
+                        {
+                            number[n] = atoi(tmp);
+                            if (number[n] <= 0 || number[n] > LOTTERY_MAXNUMBER)
+                            {
+                                pCreature->Whisper(error.str().c_str(), LANG_UNIVERSAL, player);
+                                player->CLOSE_GOSSIP_MENU();
+                                return false;
+                            }
+                            tmp = strtok (NULL, " ");
+                        }
+                        else
+                        {
+                            pCreature->Whisper(error.str().c_str(), LANG_UNIVERSAL, player);
+                            player->CLOSE_GOSSIP_MENU();
+                            return false;
+                        }
+                    }
+
+                    std::stringstream ssNumber;
+                    for(int i = 0; i < LOTTERY_FIELDS; i++)
+                    {
+                        ssNumber << number[i];
+
+                        if(i < LOTTERY_FIELDS-1)
+                            ssNumber << " ";
+                    }
+
+                    sNumbers = "Du hast folgende Zahlen getipt: " + ssNumber.str();
+
+                    uint32 betMaxID = 0;
+                    QueryResult qbetMaxID = WorldDatabase.Query("SELECT MAX(id) FROM lottery_bets");
+
+                    if (qbetMaxID)
+                        betMaxID = qbetMaxID->Fetch()->GetUInt32();
+
+                    WorldDatabase.PExecute("INSERT INTO lottery_bets (id, name, guid, bet) VALUES ('%u', '%s', '%u', '%s');", betMaxID+1, player->GetName().c_str(), player->GetGUIDLow(), ssNumber.str().c_str());
+                    pCreature->Whisper(sNumbers.c_str(), LANG_UNIVERSAL, player);
+                    player->ModifyMoney(-LOTTERY_BETCOST);
+
+                    player->CLOSE_GOSSIP_MENU();
+
+                    return true;
+                }
+            }
+        }
+
+        return false;
+    }
+
+    bool OnGossipSelect(Player* pPlayer, Creature* pCreature, uint32 uiSender, uint32 uiAction)
+    {
+        if(uiAction == 9998) // Script Info
+        {
+            pPlayer->ADD_GOSSIP_ITEM(GOSSIP_ICON_CHAT, "Entwickelt von: Teiby", GOSSIP_SENDER_MAIN, uiAction);
+            pPlayer->ADD_GOSSIP_ITEM(GOSSIP_ICON_CHAT, "Website: www.teiby.de", GOSSIP_SENDER_MAIN, uiAction);
+            pPlayer->ADD_GOSSIP_ITEM(GOSSIP_ICON_CHAT, "Version: 1.2", GOSSIP_SENDER_MAIN, uiAction);
+            pPlayer->ADD_GOSSIP_ITEM(GOSSIP_ICON_CHAT, "<-- ZurÃ¼ck", GOSSIP_SENDER_MAIN, 9999);
+            pPlayer->SEND_GOSSIP_MENU(68, pCreature->GetGUID());
+        }
+        else if(uiAction == 9999)
+        {
+            pPlayer->PlayerTalkClass->ClearMenus();
+            OnGossipHello(pPlayer, pCreature);
+        }
+
+        return true;
+    }
+
+    CreatureAI* GetAI(Creature* pCreature) const
+    {
+        return new npc_lotteryAI (pCreature);
+    }
+
+    struct npc_lotteryAI : public ScriptedAI
+    {
+        npc_lotteryAI(Creature* pCreature) : ScriptedAI(pCreature) { }
+
+        struct sWinner
+        {
+            uint32 guid;
+            std::string name;
+            std::string bets;
+            uint32 points;
+        };
+
+        void UpdateAI(uint32 diff)
+        {
+            if (IsEventActive(EVENT_LOTTERY))
+            {
+                if (me->IsVisible())
+                {
+                    QueryResult qMaxID = WorldDatabase.Query("SELECT MAX(id) FROM lottery_bets");
+                    if (!qMaxID)
+                    {
+                        me->SetVisible(false);
+                        return;
+                    }
+
+                    uint32 betMaxID = qMaxID->Fetch()->GetUInt32();
+                    uint32 luckyNumber[LOTTERY_FIELDS];
+                    std::stringstream sLuckyNumber;
+                    uint32 lotteryID;
+                    const uint32 stakes = betMaxID * LOTTERY_BETCOST * 0.7f; // 70% (rest is added to the jackpot)
+
+                    uint32 winnerCount[LOTTERY_FIELDS];
+
+                    typedef std::list<sWinner> tdJW;
+                    tdJW lJackpotWinners;
+                    tdJW lWinners;
+
+                    SQLTransaction ctrans = CharacterDatabase.BeginTransaction();
+                    SQLTransaction wtrans = WorldDatabase.BeginTransaction();
+
+                    for(int i = 0; i < LOTTERY_FIELDS; i++)
+                        winnerCount[i] = 0;
+
+                    QueryResult qlotteryID = WorldDatabase.Query("SELECT MAX(id) FROM lottery");
+                    if (!qlotteryID)
+                        lotteryID = 0;
+                    else
+                        lotteryID = qlotteryID->Fetch()->GetUInt32();
+
+                    QueryResult qBets  = WorldDatabase.Query("SELECT guid, bet, name FROM lottery_bets");
+                    if (qBets)
+                    {
+                        for (int8 n = 0; n < LOTTERY_FIELDS; n++)
+                            luckyNumber[n] = urand(1, LOTTERY_MAXNUMBER);
+
+                        for(int i = 0; i < LOTTERY_FIELDS; i++)
+                        {
+                            sLuckyNumber << luckyNumber[i];
+
+                            if(i < LOTTERY_FIELDS-1)
+                                sLuckyNumber << " ";
+                        }
+
+                        do
+                        {
+                            Field *fBets = qBets->Fetch();
+                            uint32 guid = fBets[0].GetUInt32();
+                            std::string bet = fBets[1].GetString();
+                            std::string rBet = bet;
+                            std::string name = fBets[2].GetString();
+                            uint32 points = 0;
+
+                            int32 number[LOTTERY_FIELDS];
+                            char * tmp;
+
+                            tmp = strtok ((char*)bet.c_str()," ");
+
+                            for (int8 n = 0; n < LOTTERY_FIELDS; ++n)
+                            {
+                                if (tmp != NULL)
+                                {
+                                    number[n] = atoi(tmp);
+                                    tmp = strtok (NULL, " ");
+                                }
+                            }
+
+                            for (int8 n = 0; n < LOTTERY_FIELDS; ++n)
+                                for (int8 i = 0; i < LOTTERY_FIELDS; ++i)
+                                    if (number[i] == luckyNumber[n])
+                                    {
+                                        points++;
+                                        number[i] = 0;
+                                        break;
+                                    }
+
+                            if(points == 0)
+                                continue;
+
+                            sWinner winner;
+                            winner.guid = guid;
+                            winner.bets = rBet;
+                            winner.name = name;
+                            winner.points = points;
+
+                            if(points == LOTTERY_FIELDS)
+                                lJackpotWinners.push_back(winner);
+                            else
+                                lWinners.push_back(winner);
+
+                            winnerCount[points-1]++;
+
+                        } while (qBets->NextRow());
+
+
+                        for(tdJW::const_iterator itr = lWinners.begin(); itr != lWinners.end(); itr++)
+                        {
+                            uint32 cash = stakes / pow(2, LOTTERY_FIELDS - itr->points) / winnerCount[itr->points-1];
+
+                            std::stringstream text;
+                            text << "Gratulation du hast die Richtigen Zahlen getipt!\n\n";
+                            text << "Dein Los: " << itr->bets.c_str() << "\n";
+                            text << "Lotto Resultat: " << sLuckyNumber.str().c_str() << "\n\n";
+                            text << "Hits: " << itr->points << "\n";
+                            text << "Sum of bets with " << itr->points << " hits: " << winnerCount[itr->points-1];
+
+                            Player *pWinner = sObjectMgr->GetPlayerByLowGUID(itr->guid);
+                            MailDraft("Won", text.str())
+                                .AddMoney(cash)
+                                .SendMailTo(ctrans, MailReceiver(pWinner, itr->guid), MailSender(MAIL_NORMAL, 0, MAIL_STATIONERY_GM));
+
+                            wtrans->PAppend("INSERT INTO lottery_winners (id, name, guid, bet, betPoints) VALUES ('%u', '%s', '%u', '%s', '%u')", lotteryID+1, itr->name.c_str(), itr->guid, itr->bets.c_str(), itr->points);
+                        }
+
+                        uint32 jackpot;
+                        QueryResult qJackpot  = WorldDatabase.PQuery("SELECT jackpot FROM lottery WHERE id = '%u'", lotteryID);
+                        if (qJackpot)
+                            jackpot = qJackpot->Fetch()->GetUInt32();
+                        else
+                            jackpot = 0;
+
+                        jackpot += betMaxID * LOTTERY_BETCOST * 0.3f; // 30%
+
+                        for(int i = 0; i < LOTTERY_FIELDS-1; i++)
+                        {
+                            if(winnerCount[i] == 0)
+                                jackpot += stakes / pow(2, LOTTERY_FIELDS-i-1); // Add money to jackpot if there are no winners
+                        }
+
+                        if (winnerCount[LOTTERY_FIELDS-1] > 0)
+                        {
+                            jackpot /= winnerCount[LOTTERY_FIELDS-1];
+
+                            for(tdJW::const_iterator itr = lJackpotWinners.begin(); itr != lJackpotWinners.end(); itr++)
+                            {
+                                std::stringstream text;
+                                text << "GlÃ¼ckwunsch du hast den Jackpot geknackt\n\n";
+                                text << "Dein Los: " << itr->bets.c_str() << "\n";
+                                text << "Lotto Resultat: " << sLuckyNumber.str().c_str() << "\n\n";
+                                text << "Hits: " << itr->points << "\n";
+                                text << "Sum of bets with " << itr->points << " hits: " << winnerCount[itr->points-1];
+
+                                Player *pJPWinner = sObjectMgr->GetPlayerByLowGUID(itr->guid);
+                                MailDraft("Jackpot!", text.str())
+                                    .AddMoney(jackpot)
+                                    .SendMailTo(ctrans, MailReceiver(pJPWinner, itr->guid), MailSender(MAIL_NORMAL, 0, MAIL_STATIONERY_GM));
+                            }
+
+                            if (winnerCount[LOTTERY_FIELDS-1] == 1)
+                                sWorld->SendWorldText(LANG_LOTTERY_ANNOUNCE_JACKPOT, betMaxID, sLuckyNumber.str().c_str(), lJackpotWinners.begin()->name.c_str(), uint32(jackpot * 0.0001f));
+                            else
+                                sWorld->SendWorldText(LANG_LOTTERY_ANNOUNCE_JACKPOT_M_PLAYERS, betMaxID, sLuckyNumber.str().c_str(), winnerCount[LOTTERY_FIELDS-1], uint32(jackpot * 0.0001f));
+
+                            jackpot = 0;
+                        }
+                        else
+                        {
+                            sWorld->SendWorldText(LANG_LOTTERY_ANNOUNCE, betMaxID, sLuckyNumber.str().c_str(), uint32(jackpot * 0.0001f));
+                        }
+
+                        wtrans->PAppend("INSERT INTO lottery (numbers, jackpot) VALUES ('%s', '%u')", sLuckyNumber.str().c_str(), jackpot);
+                        wtrans->PAppend("DELETE FROM lottery_bets");
+
+                        WorldDatabase.CommitTransaction(wtrans);
+                        CharacterDatabase.CommitTransaction(ctrans);
+
+                        me->SetVisible(false);
+                    }
+                }
+            }
+            else
+            {
+                if (!me->IsVisible())
+                    me->SetVisible(true);
+            }
+        }
+    };
+
+};
+
+
+void AddSC_npc_lottery()
+{
+    new npc_lottery;
+}
--
2.1.0

