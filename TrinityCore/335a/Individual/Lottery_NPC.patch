From f7ecdbb6c619dc778f9f05ce8f0f6bafa5c7d7b0 Mon Sep 17 00:00:00 2001
From: LordPsyan <realmsofwarcraft@gmail.com>
Date: Sat, 20 Sep 2014 12:33:06 -0400
Subject: [PATCH] Lottery_NPC

---
 .../NPC_Lottery/world.npc_lottery.sql              |  45 ++++
 src/server/game/Scripting/ScriptLoader.cpp         |   4 +-
 src/server/scripts/Custom/npc_lottery.cpp          | 295 +++++++++++++++++++++
 3 files changed, 342 insertions(+), 2 deletions(-)
 create mode 100644 sql/TrinityCore-Patches/NPC_Lottery/world.npc_lottery.sql
 create mode 100644 src/server/scripts/Custom/npc_lottery.cpp

diff --git a/sql/TrinityCore-Patches/NPC_Lottery/world.npc_lottery.sql b/sql/TrinityCore-Patches/NPC_Lottery/world.npc_lottery.sql
new file mode 100644
index 0000000..5db9be6
--- /dev/null
+++ b/sql/TrinityCore-Patches/NPC_Lottery/world.npc_lottery.sql
@@ -0,0 +1,45 @@
+DROP TABLE IF EXISTS `lottery_winners`;
+CREATE TABLE `lottery_winners` (
+  `id` int(10) unsigned NOT NULL,
+  `name` varchar(12) NOT NULL,
+  `guid` int(10) unsigned NOT NULL DEFAULT '0',
+  `bet` longtext NOT NULL,
+  `betPoints` int(10) unsigned NOT NULL DEFAULT '0',
+  `time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
+) ENGINE=MyISAM DEFAULT CHARSET=utf8;
+
+DROP TABLE IF EXISTS `lottery_bets`;
+CREATE TABLE `lottery_bets` (
+  `id` int(10) unsigned NOT NULL DEFAULT '1',
+  `name` varchar(12) NOT NULL,
+  `guid` int(10) unsigned NOT NULL DEFAULT '0',
+  `bet` longtext NOT NULL,
+  `time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
+  PRIMARY KEY (`id`)
+) ENGINE=MyISAM DEFAULT CHARSET=utf8;
+
+DROP TABLE IF EXISTS `lottery`;
+CREATE TABLE `lottery` (
+  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
+  `number_1` int(10) unsigned NOT NULL DEFAULT '0',
+  `number_2` int(10) unsigned NOT NULL DEFAULT '0',
+  `number_3` int(10) unsigned NOT NULL DEFAULT '0',
+  `number_4` int(10) unsigned NOT NULL DEFAULT '0',
+  `number_5` int(10) unsigned NOT NULL DEFAULT '0',
+  `jackpot` int(10) unsigned NOT NULL DEFAULT '0',
+  `time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
+  PRIMARY KEY (`id`)
+) ENGINE=MyISAM AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;
+
+DELETE FROM game_event WHERE eventEntry = 132;
+INSERT INTO game_event VALUES
+(132, "2011-01-31 20:00:00", "2020-12-31 06:00:00", 1440, 1, 0, "Lottery", 0, 1);
+
+DELETE FROM `creature_template` WHERE (`entry`=99013);
+INSERT INTO `creature_template` (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `dmgschool`, `BaseAttackTime`, `RangeAttackTime`, `BaseVariance`, `RangeVariance`, `unit_class`, `unit_flags`, `unit_flags2`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `HoverHeight`, `HealthModifier`, `ManaModifier`, `ArmorModifier`, `DamageModifier`, `ExperienceModifier`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `VerifiedBuild`) VALUES
+('99013','0','0','0','0','0','24818','3422','24819','24821','"Lucky" Bob','Lottery','','0','255','255','0','35','0','1','1.14286','1','0','0','0','0','1','1','1','0','0','0','0','0','0','0','0','7','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','','0','3','1','5','1','1','1','1','0','0','0','0','0','0','0','0','1','0','0','npc_lottery','1');
+
+DELETE FROM `trinity_string` where `entry` IN ('11005', '11006', '11007');
+INSERT INTO `trinity_string` (`entry`, `content_default`, `content_loc8`) VALUES ('11005', '', '|cffff0000[Lottery Announcement]:Lottery Drawing Results! Total Rates Involved: %u. The winning numbers are %u %u %u %u %u. Jackpot is currently %f Gold. There was no winner.|r');
+INSERT INTO `trinity_string` (`entry`, `content_default`, `content_loc8`) VALUES ('11006', '', '|cffff0000[Lottery Announcement]:Lottery Drawing Results! Total Rates Involved: %u. The winning numbers are %u %u %u %u %u. Jackpot is %f Gold. The winner is %s.|r');
+INSERT INTO `trinity_string` (`entry`, `content_default`, `content_loc8`) VALUES ('11007', '', '|cffff0000[Lottery Announcement]:Lottery Drawing Results! Total Rates Involved: %u. The winning numbers are %u %u %u %u %u. Jackpot is %f Gold. Won by %u players.|r');
diff --git a/src/server/game/Scripting/ScriptLoader.cpp b/src/server/game/Scripting/ScriptLoader.cpp
index 5d120b2..13edeb3 100644
--- a/src/server/game/Scripting/ScriptLoader.cpp
+++ b/src/server/game/Scripting/ScriptLoader.cpp
@@ -1512,7 +1512,7 @@ void AddBattlegroundScripts()
 // start76
 // start77
 // start78
-// start79
+void AddSC_npc_lottery();
 // start80
 #endif

@@ -1598,7 +1598,7 @@ void AddCustomScripts()
 // end76
 // end77
 // end78
-// end79
+    AddSC_npc_lottery();
 // end80
 #endif
 }
diff --git a/src/server/scripts/Custom/npc_lottery.cpp b/src/server/scripts/Custom/npc_lottery.cpp
new file mode 100644
index 0000000..ffef9e0
--- /dev/null
+++ b/src/server/scripts/Custom/npc_lottery.cpp
@@ -0,0 +1,295 @@
+#include "ScriptPCH.h"
+#include "Config.h"
+
+#define GOSSIP_BUY_TICKET                                     "I would like to buy a ticket."
+#define EVENT_LOTTERY                                         132
+#define LANG_LOTTERY_ANNOUNCE                                 11005
+#define LANG_LOTTERY_ANNOUNCE_JACKPOT                         11006
+#define LANG_LOTTERY_ANNOUNCE_JACKPOT_M_PLAYERS               11007
+
+class npc_lottery : public CreatureScript
+{
+public:
+    npc_lottery() : CreatureScript("npc_lottery") { }
+
+    bool OnGossipHello(Player* pPlayer, Creature* pCreature)
+    {
+        if (pPlayer && !pPlayer->IsGameMaster() && sConfigMgr->GetBoolDefault("Lottery.Enable", false))
+        {
+            if (pPlayer->getLevel() >= uint32(sConfigMgr->GetIntDefault("Lottery.MinUserLVL", 60)) && pPlayer->GetMoney() >= uint32(sConfigMgr->GetIntDefault("Lottery.BetCost", 500000)))
+            {
+                std::string wh = ("Hello, stranger. Do you want to try your luck? Oh yeah, by the look in your eyes I can tell you want to. Pick 5 numbers ranging from 1 to " +
+                                    std::string(sConfigMgr->GetStringDefault("Lottery.MaxNumber", "30")) + " (separated by spaces), pay the cost of rates and wait for the draw. It's very simple.");
+                pCreature->Whisper(wh.c_str(), LANG_UNIVERSAL, pPlayer);
+                pPlayer->PrepareGossipMenu(pCreature);
+                pPlayer->ADD_GOSSIP_ITEM_EXTENDED(0, GOSSIP_BUY_TICKET, GOSSIP_SENDER_MAIN, GOSSIP_ACTION_INFO_DEF, "", 0, true);
+                pPlayer->SEND_GOSSIP_MENU(pPlayer->GetGossipTextId(pCreature), pCreature->GetGUID());
+            }
+            else
+            {
+                std::string wh = ("You do not have enough money (requires " + std::string(sConfigMgr->GetStringDefault("Lottery.BetCost", "500000"))+ "units in copper), or your level is not high enough (requires Level " + std::string(sConfigMgr->GetStringDefault("Lottery.MinUserLVL", "60")) + ").");
+                pCreature->Whisper(wh.c_str(), LANG_UNIVERSAL, pPlayer);
+            }
+        }
+        return true;
+    }
+
+    bool OnGossipSelectCode(Player* pPlayer, Creature* pCreature, uint32 uiSender, uint32 uiAction, const char* code)
+    {
+        pPlayer->PlayerTalkClass->ClearMenus();
+        if (uiSender == GOSSIP_SENDER_MAIN)
+        {
+            switch (uiAction)
+            {
+                case GOSSIP_ACTION_INFO_DEF:
+                {
+                    char * charCode = (char*)code;
+                    std::string strCode = (char*)code;
+                    char * tmp;
+                    int32 number[5];
+                    std::string error = ("You have entered an invalid number. Your bid must be in the range of 1 to " + std::string(sConfigMgr->GetStringDefault("Lottery.MaxNumber", "30")));
+                    std::string errordub = ("You have already picked your numbers. Good luck and may Elune Bless you.");
+                    std::string numbers = ("You bet on the numbers:" + std::string(strCode));
+
+                    tmp = strtok (charCode," ");
+                    for (int8 n = 0; n < 5; ++n)
+                    {
+                        if (tmp != NULL)
+                        {
+                            number[n] = atoi(tmp);
+                            if (number[n] < 0 || number[n] > sConfigMgr->GetIntDefault("Lottery.MaxNumber", 30))
+                            {
+                                pCreature->Whisper(error.c_str(), LANG_UNIVERSAL, pPlayer);
+                                pPlayer->CLOSE_GOSSIP_MENU();
+                                return false;
+                            }
+                            tmp = strtok (NULL, " ");
+                        }
+                        else
+                        {
+                            pCreature->Whisper(error.c_str(), LANG_UNIVERSAL, pPlayer);
+                            pPlayer->CLOSE_GOSSIP_MENU();
+                            return false;
+                        }
+                    }
+
+                    uint32 betMaxID;
+                    QueryResult qbetMaxID = WorldDatabase.Query("SELECT MAX(id) FROM lottery_bets");
+
+                    if (qbetMaxID)
+                        betMaxID = qbetMaxID->Fetch()->GetUInt32();
+                    else
+                        betMaxID = 0;
+
+                    uint32 rBetGuid;
+                    QueryResult pBetGuid = WorldDatabase.Query("SELECT guid FROM lottery_bets");
+
+                    if (pBetGuid)
+                        rBetGuid = pBetGuid->Fetch()->GetUInt32();
+                    else
+                        rBetGuid = 0;
+
+                    if (rBetGuid == pPlayer->GetGUID())
+                    {
+                        pCreature->Whisper(errordub.c_str(), LANG_UNIVERSAL, pPlayer);
+                        pPlayer->CLOSE_GOSSIP_MENU();
+                        return false;
+                    }
+
+                    WorldDatabase.PExecute("INSERT INTO lottery_bets (id, name, guid, bet) VALUES ('%u', '%s', '%u', '%s')", betMaxID+1, GetName().c_str(), pPlayer, strCode.c_str());
+                    pCreature->Whisper(numbers.c_str(), LANG_UNIVERSAL, pPlayer);
+                    pPlayer->ModifyMoney(-sConfigMgr->GetIntDefault("Lottery.BetCost", 500000));
+
+                    pPlayer->CLOSE_GOSSIP_MENU();
+
+                    return true;
+                }
+            }
+        }
+
+        return false;
+        }
+
+    CreatureAI* GetAI(Creature* pCreature) const
+    {
+        return new npc_lotteryAI (pCreature);
+    }
+
+    struct npc_lotteryAI : public ScriptedAI
+    {
+        npc_lotteryAI(Creature* pCreature) : ScriptedAI(pCreature) { }
+
+        void UpdateAI(const uint32 diff)
+        {
+            if (IsEventActive(EVENT_LOTTERY))
+            {
+                if (me->IsVisible())
+                {
+                    QueryResult qMaxID = WorldDatabase.Query("SELECT MAX(id) FROM lottery_bets");
+                    if (!qMaxID)
+                        return;
+
+                    uint32 betMaxID = qMaxID->Fetch()->GetUInt32();
+                    uint32 luckyNumber[5];
+                    uint32 lotteryID;
+                    uint32 jackpotWinners = 0;
+
+                    QueryResult qlotteryID = WorldDatabase.Query("SELECT MAX(id) FROM lottery");
+                    if (!qlotteryID)
+                        lotteryID = 0;
+                    else
+                        lotteryID = qlotteryID->Fetch()->GetUInt32();
+
+                    QueryResult qBets  = WorldDatabase.Query("SELECT guid, bet, name FROM lottery_bets");
+                    if (qBets)
+                    {
+                        for (int8 n = 0; n < 5; ++n)
+                        {
+                            luckyNumber[n] = urand(1, sConfigMgr->GetIntDefault("Lottery.MaxNumber", 30));
+                        }
+
+                        do
+                        {
+                            Field *fBets = qBets->Fetch();
+                            uint32 guid = fBets[0].GetUInt32();
+                            std::string bet = fBets[1].GetString();
+                            std::string rBet = bet;
+                            std::string name = fBets[2].GetString();
+                            uint32 points = 0;
+                            uint32 cash;
+
+                            int32 number[5];
+                            char * tmp;
+
+                            tmp = strtok ((char*)bet.c_str()," ");
+
+                            for (int8 n = 0; n < 5; ++n)
+                            {
+                                if (tmp != NULL)
+                                {
+                                    number[n] = atoi(tmp);
+                                    tmp = strtok (NULL, " ");
+                                }
+                            }
+
+                            for (int8 n = 0; n < 5; ++n)
+                            {
+                                for (int8 i = 0; i < 5; ++i)
+                                {
+                                    if (number[n] == luckyNumber[i])
+                                        ++points;
+                                }
+                            }
+
+                            switch (points)
+                            {
+                                case 1:
+                                {
+                                    cash = uint32(betMaxID * sConfigMgr->GetIntDefault("Lottery.BetCost", 500000) * 0.005f);
+                                    break;
+                                }
+                                case 2:
+                                {
+                                    cash = uint32(betMaxID * sConfigMgr->GetIntDefault("Lottery.BetCost", 500000) * 0.01f);
+                                    break;
+                                }
+                                case 3:
+                                {
+                                    cash = uint32(betMaxID * sConfigMgr->GetIntDefault("Lottery.BetCost", 500000) * 0.05f);
+                                    break;
+                                }
+                                case 4:
+                                {
+                                    cash = uint32(betMaxID * sConfigMgr->GetIntDefault("Lottery.BetCost", 500000) * 0.2f);
+                                    break;
+                                }
+                                case 5:
+                                {
+                                    WorldDatabase.PExecute("INSERT INTO lottery_winners (id, name, guid, bet, betPoints) VALUES ('%u', '%s', '%u', '%s', '%u')", lotteryID+1, name.c_str(), guid, rBet.c_str(), points);
+                                    ++jackpotWinners;
+                                    continue;
+                                }
+                                default:
+                                    continue;
+                            }
+
+                            Player *pWinner = sObjectMgr->GetPlayerByLowGUID(guid);
+                            SQLTransaction trans = CharacterDatabase.BeginTransaction();
+                            MailDraft("Prize", "Congratulations, Your number combination was a winner!")
+                                .AddMoney(cash)
+                                .SendMailTo(trans, MailReceiver(pWinner), MailSender(MAIL_NORMAL, 0, MAIL_STATIONERY_GM));
+                            CharacterDatabase.CommitTransaction(trans);
+
+                            WorldDatabase.PExecute("INSERT INTO lottery_winners (id, name, guid, bet, betPoints) VALUES ('%u', '%s', '%u', '%s', '%u')", lotteryID+1, name.c_str(), guid, rBet.c_str(), points);
+                        } while (qBets->NextRow());
+                        uint64 jackpot;
+                        uint64 rJackpot;
+                        uint64 defJackpot = uint64(betMaxID * sConfigMgr->GetIntDefault("Lottery.BetCost", 500000) * 0.7f);
+                        QueryResult qJackpot  = WorldDatabase.PQuery("SELECT jackpot FROM lottery WHERE id = '%u'", lotteryID);
+                        if (qJackpot)
+                            jackpot = qJackpot->Fetch()->GetUInt32();
+                        else
+                            jackpot = 0;
+
+                        rJackpot = jackpot;
+
+                        if (jackpotWinners > 0)
+                        {
+                            QueryResult qJackpotWinners = WorldDatabase.PQuery("SELECT guid FROM lottery_winners WHERE betPoints = '5' and id = '%u'", lotteryID+1);
+                            QueryResult qJackpotWinnersName;
+                            if (jackpotWinners == 1)
+                                qJackpotWinnersName = WorldDatabase.PQuery("SELECT name FROM lottery_winners WHERE betPoints = '5' and id = '%u'", lotteryID+1);
+
+                            if (qJackpotWinners)
+                            {
+                                jackpot = uint64(jackpot / jackpotWinners);
+                                do
+                                {
+                                    Field *fJackpotWinners = qJackpotWinners->Fetch();
+                                    uint32 JPguid = fJackpotWinners[0].GetUInt32();
+
+                                    Player *pJPWinner = sObjectMgr->GetPlayerByLowGUID(JPguid);
+                                    SQLTransaction trans = CharacterDatabase.BeginTransaction();
+                                    MailDraft("Jackpot,", "Wow, Yes You just won! You managed to hit the jackpot! Greetings from the organizers of Realms of Warcraft.com")
+                                        .AddMoney(jackpot = 0 ? uint64(betMaxID * sConfigMgr->GetIntDefault("Lottery.BetCost", 500000) * 0.7f) : jackpot)
+                                        .SendMailTo(trans, MailReceiver(pJPWinner), MailSender(MAIL_NORMAL, 0, MAIL_STATIONERY_GM));
+                                    CharacterDatabase.CommitTransaction(trans);
+                                } while (qJackpotWinners->NextRow());
+                            }
+
+                            if (jackpotWinners == 1 && qJackpotWinnersName)
+                            {
+                                std::string wName = qJackpotWinnersName->Fetch()->GetString();
+                                sWorld->SendWorldText(LANG_LOTTERY_ANNOUNCE_JACKPOT, betMaxID, luckyNumber[0], luckyNumber[1], luckyNumber[2], luckyNumber[3], luckyNumber[4], ((jackpot = 0 ? uint64(betMaxID * sConfigMgr->GetIntDefault("Lottery.BetCost", 500000) * 0.7f) : rJackpot) * 0.0001f), wName.c_str());
+                            }
+                            else
+                                sWorld->SendWorldText(LANG_LOTTERY_ANNOUNCE_JACKPOT_M_PLAYERS, betMaxID, luckyNumber[0], luckyNumber[1], luckyNumber[2], luckyNumber[3], luckyNumber[4], ((jackpot = 0 ? uint64(betMaxID * sConfigMgr->GetIntDefault("Lottery.BetCost", 500000) * 0.7f) : rJackpot) * 0.0001f), jackpotWinners);
+
+                            WorldDatabase.PExecute("INSERT INTO lottery (number_1, number_2, number_3, number_4, number_5, jackpot) VALUES ('%u', '%u', '%u', '%u', '%u', '%u')", luckyNumber[0], luckyNumber[1], luckyNumber[2], luckyNumber[3], luckyNumber[4], defJackpot);
+                        }
+                        else
+                        {
+                            sWorld->SendWorldText(LANG_LOTTERY_ANNOUNCE, betMaxID, luckyNumber[0], luckyNumber[1], luckyNumber[2], luckyNumber[3], luckyNumber[4], ((jackpot + defJackpot) * 0.0001f));
+                            WorldDatabase.PExecute("INSERT INTO lottery (number_1, number_2, number_3, number_4, number_5, jackpot) VALUES ('%u', '%u', '%u', '%u', '%u', '%u')", luckyNumber[0], luckyNumber[1], luckyNumber[2], luckyNumber[3], luckyNumber[4], (jackpot + defJackpot));
+                        }
+                        WorldDatabase.PExecute("DELETE FROM lottery_bets");
+
+                        me->SetVisible(false);
+                    }
+                }
+            }
+            else
+            {
+                if (!me->IsVisible())
+                    me->SetVisible(true);
+            }
+        }
+    };
+
+};
+
+
+void AddSC_npc_lottery()
+{
+    new npc_lottery;
+}
\ No newline at end of file
--
2.1.0

