From 9b90dc3844949bb0d36388581989c2e65befa1df Mon Sep 17 00:00:00 2001
From: lordpsyan <realmsofwarcraft@gmail.com>
Date: Sun, 30 Dec 2012 19:13:46 -0600
Subject: [PATCH] 2012_12_30-MangChat

---
 sql/_extras/realmd_mangchat.sql  |   21 +++
 src/game/CMakeLists.txt          |    4 +
 src/game/Channel.cpp             |    7 +
 src/game/ChatHandler.cpp         |    4 +
 src/game/World.cpp               |    5 +
 src/game/mangchat/IRCClient.cpp  |  179 +++++++++++++++++++++++
 src/game/mangchat/IRCClient.h    |  154 ++++++++++++++++++++
 src/game/mangchat/IRCHandler.cpp |  297 ++++++++++++++++++++++++++++++++++++++
 src/game/mangchat/IRCMgr.cpp     |  136 +++++++++++++++++
 src/game/mangchat/IRCMgr.h       |   50 +++++++
 src/game/mangchat/IRCSock.cpp    |  134 +++++++++++++++++
 win/VC100/game.vcxproj           |    6 +
 win/VC100/game.vcxproj.filters   |   21 +++
 13 files changed, 1018 insertions(+), 0 deletions(-)
 create mode 100644 sql/_extras/realmd_mangchat.sql
 create mode 100644 src/game/mangchat/IRCClient.cpp
 create mode 100644 src/game/mangchat/IRCClient.h
 create mode 100644 src/game/mangchat/IRCHandler.cpp
 create mode 100644 src/game/mangchat/IRCMgr.cpp
 create mode 100644 src/game/mangchat/IRCMgr.h
 create mode 100644 src/game/mangchat/IRCSock.cpp

diff --git a/sql/_extras/realmd_mangchat.sql b/sql/_extras/realmd_mangchat.sql
new file mode 100644
index 0000000..1cd9aae
--- /dev/null
+++ b/sql/_extras/realmd_mangchat.sql
@@ -0,0 +1,21 @@
+DROP TABLE IF EXISTS `mangchat`;
+CREATE TABLE `mangchat` (
+  `id` int(11) unsigned NOT NULL DEFAULT '0',
+  `host` text,
+  `port` int(11) NOT NULL DEFAULT '0',
+  `user` text,
+  `pass` text,
+  `nick` text,
+  `auth` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`id`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+DROP TABLE IF EXISTS `mangchat_links`;
+CREATE TABLE `mangchat_links` (
+  `mangchat_id` int(11) unsigned NOT NULL DEFAULT '0',
+  `wow_channel` varchar(255) NOT NULL DEFAULT '',
+  `wow_channel_options` int(11) unsigned NOT NULL DEFAULT '0',
+  `irc_channel` varchar(255) NOT NULL DEFAULT '',
+  `irc_channel_options` int(11) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`mangchat_id`,`wow_channel`,`irc_channel`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
diff --git a/src/game/CMakeLists.txt b/src/game/CMakeLists.txt
index 75133af..8cff961 100644
--- a/src/game/CMakeLists.txt
+++ b/src/game/CMakeLists.txt
@@ -77,6 +77,10 @@ source_group("Movement"
     movement/util.cpp
 )
 
+source_group("MangChat"
+  REGULAR_EXPRESSION mangchat/.*
+)
+
 if(PCH)
   include_directories(${CMAKE_CURRENT_BINARY_DIR})
 endif()
diff --git a/src/game/Channel.cpp b/src/game/Channel.cpp
index 023f80a..ca34ce1 100644
--- a/src/game/Channel.cpp
+++ b/src/game/Channel.cpp
@@ -20,6 +20,7 @@
 #include "ObjectMgr.h"
 #include "World.h"
 #include "SocialMgr.h"
+#include "mangchat/IRCMgr.h"
 
 Channel::Channel(const std::string& name, uint32 channel_id)
     : m_announce(true), m_moderate(false), m_name(name), m_flags(0), m_channelId(channel_id)
@@ -111,6 +112,9 @@ void Channel::Join(ObjectGuid p, const char* pass)
     MakeYouJoined(&data);
     SendToOne(&data, p);
 
+    // mangChat
+    sIRCMgr.HandleWoWChannelAction(m_name, ACTION_JOIN_CHANNEL, plr);
+
     JoinNotify(p);
 
     // if no owner first logged will become
@@ -156,6 +160,9 @@ void Channel::Leave(ObjectGuid p, bool send)
             SendToAll(&data);
         }
 
+        // mangChat
+        sIRCMgr.HandleWoWChannelAction(m_name, ACTION_LEAVE_CHANNEL, plr);
+
         LeaveNotify(p);
 
         if (changeowner)
diff --git a/src/game/ChatHandler.cpp b/src/game/ChatHandler.cpp
index f3d2fb8..37cc6fe 100644
--- a/src/game/ChatHandler.cpp
+++ b/src/game/ChatHandler.cpp
@@ -35,6 +35,7 @@
 #include "Util.h"
 #include "GridNotifiersImpl.h"
 #include "CellImpl.h"
+#include "mangchat/IRCMgr.h"
 
 bool WorldSession::processChatmessageFurtherAfterSecurityChecks(std::string& msg, uint32 lang)
 {
@@ -441,6 +442,9 @@ void WorldSession::HandleMessagechatOpcode(WorldPacket& recv_data)
             if (msg.empty())
                 break;
 
+            // mangChat
+            sIRCMgr.HandleWoWChannelAction(channel, msg, _player);
+
             if (ChannelMgr* cMgr = channelMgr(_player->GetTeam()))
                 if (Channel* chn = cMgr->GetChannel(channel, _player))
                     chn->Say(_player->GetObjectGuid(), msg.c_str(), lang);
diff --git a/src/game/World.cpp b/src/game/World.cpp
index 4d676c3..c1423c5 100644
--- a/src/game/World.cpp
+++ b/src/game/World.cpp
@@ -66,6 +66,7 @@
 #include "CharacterDatabaseCleaner.h"
 #include "CreatureLinkingMgr.h"
 #include "Warden/WardenDataStorage.h"
+#include "mangchat/IRCMgr.h"
 
 INSTANTIATE_SINGLETON_1(World);
 
@@ -1355,6 +1356,10 @@ void World::SetInitialWorldSettings()
     sLog.outString("Initialize AuctionHouseBot...");
     sAuctionBot.Initialize();
 
+    // mangChat
+    sLog.outString("Initialize MangChat...");
+    sIRCMgr.Initialize();
+
     sLog.outString("WORLD: World initialized");
 
     uint32 uStartInterval = WorldTimer::getMSTimeDiff(uStartTime, WorldTimer::getMSTime());
diff --git a/src/game/mangchat/IRCClient.cpp b/src/game/mangchat/IRCClient.cpp
new file mode 100644
index 0000000..7d5e068
--- /dev/null
+++ b/src/game/mangchat/IRCClient.cpp
@@ -0,0 +1,179 @@
+/*
+ * MangChat for MaNGOS, the open source MMORPG-server
+ *
+ * This Program Is Free Software; You Can Redistribute It And/Or Modify It Under The
+ * Terms Of The GNU General Public License
+ *
+ * Written and Developed by Cybrax <cybraxvd@gmail.com>, |Death| <death@hell360.net>,
+ * Lice <lice@yeuxverts.net>, Dj_baby, Sanaell, Tase, Shinzon <shinzon@wowgollum.com>,
+ * Xeross, 3raZar3, the orangevirus team <www.orangevir.us>, ...
+ *
+ * Rewritten by kid10
+ *
+ * With Help And Support From The MaNGOS Project Community.
+ * PLEASE RETAIN THE COPYRIGHT OF THE AUTHORS.
+ */
+
+#include "IRCClient.h"
+#include "../ObjectMgr.h"
+#include "../World.h"
+#include "../ChannelMgr.h"
+#include "../Channel.h"
+#include "../Chat.h"
+
+IRCClient::IRCClient(string sHost, int iPort, string sUser, string sPass, string sNick, ChannelLinkMap WoWChannelLinks, ChannelLinkMap IRCChannelLinks, uint8 uiAuth) :
+m_bActive(true),
+m_sHost(sHost),
+m_iPort(iPort),
+m_sUser(sUser),
+m_sPass(sPass),
+m_sNick(sNick),
+m_mWoWLinks(WoWChannelLinks),
+m_mIRCLinks(IRCChannelLinks),
+m_uiAuth(uiAuth)
+{
+}
+
+IRCClient::~IRCClient()
+{
+    m_bActive = false;
+}
+
+// ZThread Entry This function is called when the thread is created in Master.cpp (mangosd)
+void IRCClient::run()
+{
+    // Before we begin we wait a while MaNGOS is still starting up.
+    ACE_Based::Thread::Sleep(500);
+
+    /* Connection count
+     */
+    int cCount = 0;
+
+    // Create a loop to keep the thread running untill active is set to false
+    while (m_bActive && !World::IsStopped())
+    {
+        // Initialize socket library
+        if (InitSock())
+        {
+            // Connect To The IRC Server
+            sLog.outString("MangChat: Connecting to %s Try # %d", m_sHost.c_str(), cCount);
+
+            if (Connect(m_sHost.c_str(), m_iPort))
+            {
+                sLog.outString("MangChat: Connected And Logging In");
+
+                // On connection success reset the connection counter
+                cCount = 0;
+
+                // Login to the IRC server
+                if (Login(m_sNick, m_sUser, m_sPass))
+                {
+                    sLog.outString("MangChat: Logged In And Running!!");
+
+                    // While we are connected to the irc server keep listening for data on the socket
+                    while (m_bConnected && !World::IsStopped())
+                    {
+                        SockRecv();
+                    }
+                }
+
+                sLog.outString("MangChat: Connection To IRC Server Lost!");
+            }
+
+            // When an error occures or connection lost cleanup
+            Disconnect();
+
+            // Increase the connection counter
+            ++cCount;
+
+            // if MAX_CONNECT_ATTEMPT is reached stop trying
+            if (cCount == MAX_CONNECT_ATTEMPT)
+                m_bActive = false;
+
+            // If we need to reattempt a connection wait WAIT_CONNECT_TIME milli seconds before we try again
+            if (m_bActive)
+                ACE_Based::Thread::Sleep(WAIT_CONNECT_TIME);
+        }
+        else
+        {
+            // Socket could not initialize cancel
+            m_bActive = false;
+            sLog.outError("MangChat: Could not initialize socket");
+        }
+    }
+    // thread stays alive for calls from other threads
+}
+
+bool IRCClient::SendToIRC(string sData)
+{
+    if (m_bConnected)
+    {
+        if (send(SOCKET, sData.c_str(), sData.length(), 0) == -1)
+        {
+            sLog.outError("IRC Error: Socket Receive ** \n");
+            //Disconnect();
+            return false;
+        }
+    }
+
+    return true;
+}
+
+bool IRCClient::SendToIRCChannel(std::string sChannel, std::string sMessage)
+{
+    if (m_bConnected)
+        return SendToIRC("PRIVMSG #" + sChannel + " :" + sMessage + "\n");
+
+    return false;
+}
+
+void IRCClient::SendToWoWChannel(string sChannel, std::string sMessage)
+{
+    if (sChannel.length() < 1)
+        return;
+
+    // IRC-Protocol does not use a specific character encoding.
+    // TODO: Autoencode to UTF8 (as used in the wow client)
+
+    HashMapHolder<Player>::MapType& m = ObjectAccessor::Instance().GetPlayers();
+    for (HashMapHolder<Player>::MapType::iterator itr = m.begin(); itr != m.end(); ++itr)
+    {
+        if (itr->second && itr->second->GetSession()->GetPlayer() && itr->second->GetSession()->GetPlayer()->IsInWorld())
+        {
+            if (ChannelMgr* cMgr = channelMgr(itr->second->GetSession()->GetPlayer()->GetTeam()))
+            {
+                if (Channel* chn = cMgr->GetChannel(sChannel, itr->second->GetSession()->GetPlayer()))
+                {
+                    WorldPacket data;
+                    ChatHandler::FillMessageData(&data, NULL, CHAT_MSG_CHANNEL, LANG_UNIVERSAL, sChannel.c_str(), ObjectGuid(), sMessage.c_str(), NULL);
+                    itr->second->GetSession()->SendPacket(&data);
+                }
+            }
+        }
+    }
+}
+
+string IRCClient::GetSubstring(string sContent, int iStartIdx, int iEndIdx)
+{
+    if (iStartIdx < 0 || iEndIdx < 0 ||
+        iEndIdx <= iStartIdx ||
+        sContent.length() < (uint32)iEndIdx)
+        return "";
+
+    return sContent.substr(iStartIdx, std::max(1, iEndIdx - iStartIdx));
+}
+
+int IRCClient::FindSubstring(string sContent, string sFind, int iOffset, int iIdxPlus)
+{
+    if (iOffset < 0 || sContent.length() <= (uint32)iOffset)
+        return -1;
+
+    int iIndex = sContent.find(sFind.c_str(), iOffset);
+
+    if (iIndex < 0)
+    {
+        return -1;
+    }
+    else
+        return iIndex + iIdxPlus;
+}
diff --git a/src/game/mangchat/IRCClient.h b/src/game/mangchat/IRCClient.h
new file mode 100644
index 0000000..b31719c
--- /dev/null
+++ b/src/game/mangchat/IRCClient.h
@@ -0,0 +1,154 @@
+/*
+ * MangChat for MaNGOS, the open source MMORPG-server
+ *
+ * This Program Is Free Software; You Can Redistribute It And/Or Modify It Under The
+ * Terms Of The GNU General Public License
+ *
+ * Written and Developed by Cybrax <cybraxvd@gmail.com>, |Death| <death@hell360.net>,
+ * Lice <lice@yeuxverts.net>, Dj_baby, Sanaell, Tase, Shinzon <shinzon@wowgollum.com>,
+ * Xeross, 3raZar3, the orangevirus team <www.orangevir.us>, ...
+ *
+ * Rewritten by kid10
+ *
+ * With Help And Support From The MaNGOS Project Community.
+ * PLEASE RETAIN THE COPYRIGHT OF THE AUTHORS.
+ */
+
+#ifndef _IRC_CLIENT_H
+#define _IRC_CLIENT_H
+
+#include "Common.h"
+#include "../Player.h"
+
+using namespace std;
+
+enum HardcodedOptions
+{
+    MAX_CONNECT_ATTEMPT = 20,
+    WAIT_CONNECT_TIME = 30000
+};
+
+enum MangChatAuthMethods
+{
+    AUTH_NO_AUTH = 0,
+    AUTH_NICKSERV_PW = 1,
+    AUTH_NICKSERV_USER_AND_PW = 2,
+    MAX_AUTH_METHODS = 3
+};
+
+enum MangChatChannelOptions
+{
+    OPTION_LINK_WITH_OTHER_CHANNEL = 1,
+    OPTION_DISPLAY_JOINS = 2,
+    OPTION_DISPLAY_LEAVES = 4,
+    OPTION_DISPLAY_GM_TAG = 8,
+    OPTION_DISPLAY_KICKS = 16
+};
+
+struct MangChatChannel
+{
+    public:
+        MangChatChannel(string _sChannel, uint16 _uiOptions) :
+            sChannel(_sChannel),
+            uiOptions(_uiOptions)
+            { }
+
+        string sChannel;
+        uint16 uiOptions;
+};
+
+typedef list<MangChatChannel> ChannelList;
+typedef map<string, ChannelList> ChannelLinkMap;
+
+// IRCClient main class
+class IRCClient : public ACE_Based::Runnable
+{
+    public:
+        IRCClient(string sHost, int iPort, string sUser, string sPass, string sNick, ChannelLinkMap WoWChannelLinks, ChannelLinkMap IRCChannelLinks, uint8 uiAuth);
+        ~IRCClient();
+
+        // ZThread Entry
+        void run();
+
+        // This function is called in Channel.cpp
+        void HandleJoinWoWChannel(Player* pPlayer, string sChannel);
+        // This function is called in Channel.cpp
+        void HandleLeaveWoWChannel(Player* pPlayer, string sChannel);
+        // This function is called in ChatHandler.cpp
+        void HandleSendMessage(Player* pPlayer, string sMessage, string sChannel);
+
+    private:
+        // Initialize socket library
+        bool InitSock();
+        // Connect to IRC Server
+        bool Connect(const char* cHost, int nPort);
+        // Login to IRC Server
+        bool Login(std::string sNick, std::string sUser, std::string sPass);
+        // Receives data from the socket.
+        void SockRecv();
+        // Processes the data received from IRC
+        void HandleReceivedData(std::string sData);
+
+        // Send raw data to IRC
+        bool SendToIRC(string sData);
+        // Send a message to the specified IRC channel
+        bool SendToIRCChannel(std::string sChannel, std::string sMessage);
+        // Sends a message to all players on the specified channel
+        void SendToWoWChannel(string sChannel, std::string sMessage);
+
+        /* Cut a piece out of a string
+         */
+        string GetSubstring(string sContent, int iStartIdx, int iEndIdx);
+
+        /* Searches the given string content
+           Returns -1 or the found position plus iIdxPlus
+         */
+        int FindSubstring(string sContent, string sFind, int iOffset, int iIdxPlus = 0);
+
+        // Disconnect from IRC and cleanup socket
+        void Disconnect();
+
+        /* IRCClient active
+         */
+        bool m_bActive;
+
+        /* Connected to IRC
+         */
+        bool m_bConnected;
+
+        /* IRC Server Host
+         */
+        string m_sHost;
+
+        /* IRC Server Port
+         */
+        int m_iPort;
+
+        /* IRC Username
+         */
+        string m_sUser;
+
+        /* IRC Password
+         */
+        string m_sPass;
+
+        /* IRC Nickname
+         */
+        string m_sNick;
+
+        /* WoW Channel : IRC Channel
+         */
+        ChannelLinkMap m_mWoWLinks;
+
+        /* IRC Channel : WoW Channel
+         */
+        ChannelLinkMap m_mIRCLinks;
+
+        /* Authenticationmethod
+         */
+        uint8 m_uiAuth;
+
+        // Socket indentifier
+        int SOCKET;
+};
+#endif
diff --git a/src/game/mangchat/IRCHandler.cpp b/src/game/mangchat/IRCHandler.cpp
new file mode 100644
index 0000000..a3591e8
--- /dev/null
+++ b/src/game/mangchat/IRCHandler.cpp
@@ -0,0 +1,297 @@
+/*
+ * MangChat for MaNGOS, the open source MMORPG-server
+ *
+ * This Program Is Free Software; You Can Redistribute It And/Or Modify It Under The
+ * Terms Of The GNU General Public License
+ *
+ * Written and Developed by Cybrax <cybraxvd@gmail.com>, |Death| <death@hell360.net>,
+ * Lice <lice@yeuxverts.net>, Dj_baby, Sanaell, Tase, Shinzon <shinzon@wowgollum.com>,
+ * Xeross, 3raZar3, the orangevirus team <www.orangevir.us>, ...
+ *
+ * Rewritten by kid10
+ *
+ * With Help And Support From The MaNGOS Project Community.
+ * PLEASE RETAIN THE COPYRIGHT OF THE AUTHORS.
+ */
+
+#include "IRCMgr.h"
+#include "IRCClient.h"
+#include "../World.h"
+#include "../Player.h"
+#include "../../shared/Log.h"
+
+void IRCMgr::HandleWoWChannelAction(string sChannel, string sMessage, Player* pPlayer)
+{
+    for (ClientList::const_iterator itr = m_lClients.begin(); itr != m_lClients.end(); ++itr)
+        (*itr)->HandleSendMessage(pPlayer, sMessage, sChannel);
+}
+
+void IRCClient::HandleSendMessage(Player* pPlayer, string sMessage, string sChannel)
+{
+    if (m_bConnected && pPlayer)
+    {
+        ChannelLinkMap::const_iterator itr = m_mWoWLinks.find(sChannel);
+
+        if (itr != m_mWoWLinks.end())
+        {
+            ChannelList channels = itr->second;
+
+            for (ChannelList::const_iterator itr2 = channels.begin(); itr2 != channels.end(); ++itr2)
+            {
+                string sName = pPlayer->GetName();
+
+                if (pPlayer->isGameMaster() && (itr2->uiOptions & OPTION_DISPLAY_GM_TAG))
+                    sName = "[GM]" + sName;
+
+                SendToIRCChannel(itr2->sChannel, "<WoW>" + sName + ": " + sMessage);
+            }
+        }
+    }
+}
+
+void IRCMgr::HandleWoWChannelAction(string sChannel, ChannelAction action, Player* pPlayer)
+{
+    if (action == ACTION_JOIN_CHANNEL)
+    {
+        for (ClientList::const_iterator itr = m_lClients.begin(); itr != m_lClients.end(); ++itr)
+            (*itr)->HandleJoinWoWChannel(pPlayer, sChannel);
+    }
+    else if (action == ACTION_LEAVE_CHANNEL)
+    {
+        for (ClientList::const_iterator itr = m_lClients.begin(); itr != m_lClients.end(); ++itr)
+            (*itr)->HandleLeaveWoWChannel(pPlayer, sChannel);
+    }
+}
+
+void IRCClient::HandleJoinWoWChannel(Player* pPlayer, string sChannel)
+{
+    if (m_bConnected && pPlayer)
+    {
+        ChannelLinkMap::const_iterator itr = m_mWoWLinks.find(sChannel);
+
+        if (itr != m_mWoWLinks.end())
+        {
+            ChannelList channels = itr->second;
+
+            for (ChannelList::const_iterator itr2 = channels.begin(); itr2 != channels.end(); ++itr2)
+            {
+                if (itr2->uiOptions & OPTION_DISPLAY_JOINS)
+                {
+                    string sName = pPlayer->GetName();
+
+                    if (pPlayer->isGameMaster() && (itr2->uiOptions & OPTION_DISPLAY_GM_TAG))
+                        sName = "[GM]" + sName;
+
+                    SendToIRCChannel(itr2->sChannel, sName + " ist dem Channel " + sChannel + " beigetreten!");
+                }
+            }
+        }
+    }
+}
+
+void IRCClient::HandleLeaveWoWChannel(Player* pPlayer, string sChannel)
+{
+    if (m_bConnected && pPlayer)
+    {
+        ChannelLinkMap::const_iterator itr = m_mWoWLinks.find(sChannel);
+
+        if (itr != m_mWoWLinks.end())
+        {
+            ChannelList channels = itr->second;
+
+            for (ChannelList::const_iterator itr2 = channels.begin(); itr2 != channels.end(); ++itr2)
+            {
+                if (itr2->uiOptions & OPTION_DISPLAY_LEAVES)
+                {
+                    string sName = pPlayer->GetName();
+
+                    if (pPlayer->isGameMaster() && (itr2->uiOptions & OPTION_DISPLAY_GM_TAG))
+                        sName = "[GM]" + sName;
+
+                    SendToIRCChannel(itr2->sChannel, sName + " hat den Channel " + sChannel + " verlassen.");
+                }
+            }
+        }
+    }
+}
+
+void IRCClient::HandleReceivedData(std::string sData)
+{
+    if (GetSubstring(sData, 0, 5) == "ERROR")
+    {
+        Disconnect();
+    }
+    else if (GetSubstring(sData, 0, 4) == "PING")
+    {
+        SendToIRC("PONG " + GetSubstring(sData, 4, sData.size() - 4) + "\n");
+    }
+    else if (GetSubstring(sData, 0, 1) == ":")
+    {
+        /* Remove \r and \n
+         */
+        sData.erase(std::remove(sData.begin(), sData.end(), '\r'), sData.end());
+        sData.erase(std::remove(sData.begin(), sData.end(), '\n'), sData.end());
+
+        string sUser = GetSubstring(sData, 1, sData.find("!"));
+        string sCommand = GetSubstring(sData, FindSubstring(sData, " ", 0, 1), FindSubstring(sData, " ", FindSubstring(sData, " ", 0, 1)));
+
+        if (sCommand == "PRIVMSG")
+        {
+            string sChannel = GetSubstring(sData, FindSubstring(sData, "#", 0, 1), FindSubstring(sData, " ", FindSubstring(sData, "#", 0, 1)));
+
+            if (sChannel.length() > 0)
+            {
+                string sMessage = GetSubstring(sData, FindSubstring(sData, ":", 1, 1), sData.length());
+
+                DEBUG_LOG("IRCHandler: %s sends a message to channel %s", sUser.c_str(), sChannel.c_str());
+
+                if (sMessage.length() > 0 && sMessage.length() < 1024)
+                {
+                    ChannelLinkMap::const_iterator itr = m_mIRCLinks.find(sChannel);
+
+                    if (itr != m_mIRCLinks.end())
+                    {
+                        ChannelList channels = itr->second;
+                        string sFinalMessage = "<IRC>[" + sUser + "]: " + sMessage;
+
+                        for (ChannelList::const_iterator itr2 = channels.begin(); itr2 != channels.end(); ++itr2)
+                            SendToWoWChannel(itr2->sChannel, sFinalMessage);
+                    }
+                }
+            }
+            /* ToDo: Handle private messages
+             */
+        }
+        else if (sCommand == "JOIN")
+        {
+            string sChannel = GetSubstring(sData, FindSubstring(sData, "#", 0, 1), sData.length()); // Channel without #
+
+            DEBUG_LOG("IRCHandler: %s joins channel %s", sUser.c_str(), sChannel.c_str());
+
+            if (sUser != m_sNick)
+            {
+                ChannelLinkMap::const_iterator itr = m_mIRCLinks.find(sChannel);
+
+                if (itr != m_mIRCLinks.end())
+                {
+                    ChannelList channels = itr->second;
+                    string sMessage = "<IRC>[" + sUser + "]: Ist dem IRC Channel beigetreten!";
+
+                    for (ChannelList::const_iterator itr2 = channels.begin(); itr2 != channels.end(); ++itr2)
+                    {
+                        if (itr2->uiOptions & OPTION_DISPLAY_JOINS)
+                            SendToWoWChannel(itr2->sChannel, sMessage);
+                    }
+                }
+            }
+            else
+                SendToIRCChannel(sChannel, "MangChat Rewrite Hello! I am here and ready to start my job!");
+        }
+        else if (sCommand == "PART")
+        {
+            string sChannel = GetSubstring(sData, sData.find("#") + 1, sData.length()); // Channel without #
+
+            DEBUG_LOG("IRCHandler: %s leaves channel %s", sUser.c_str(), sChannel.c_str());
+
+            ChannelLinkMap::const_iterator itr = m_mIRCLinks.find(sChannel);
+
+            if (itr != m_mIRCLinks.end())
+            {
+                ChannelList channels = itr->second;
+                string sMessage = "<IRC>[" + sUser + "]: Hat den IRC Channel verlassen.";
+
+                for (ChannelList::const_iterator itr2 = channels.begin(); itr2 != channels.end(); ++itr2)
+                {
+                    if (itr2->uiOptions & OPTION_DISPLAY_LEAVES)
+                        SendToWoWChannel(itr2->sChannel, sMessage);
+                }
+            }
+        }    
+        /*else if (sCommand == "QUIT")
+        {
+            // ToDo: Handle it if you want.
+            // We don't get channelnames here.
+        }*/
+        /*else if (sCommand == "NICK")
+        {
+            // ToDo: Handle it if you want.
+            // We don't get channelnames here.
+            string sNewNick = sData.substr(sData.find(":", 1) + 1, sData.length());
+        }*/
+        else if (sCommand == "KICK")
+        {
+            string sChannel = GetSubstring(sData, FindSubstring(sData, "#", 0, 1), FindSubstring(sData, " ", FindSubstring(sData, "#", 0, 1))); // Channel without #
+            string sWho = GetSubstring(sData, FindSubstring(sData, ":", 1, 1), sData.length());
+
+            DEBUG_LOG("IRCHandler: %s kicks %s from channel %s", sUser.c_str(), sWho.c_str(), sChannel.c_str());
+
+            if (sWho == m_sNick)
+            {
+                SendToIRC("JOIN #" + sChannel + "\n");
+                SendToIRCChannel(sChannel, "X_x Ich _darf_ den Channel nicht verlassen.");
+            }
+            else
+            {
+                ChannelLinkMap::const_iterator itr = m_mIRCLinks.find(sChannel);
+
+                if (itr != m_mIRCLinks.end())
+                {
+                    ChannelList channels = itr->second;
+                    string sMessage = "<IRC>[" + sWho + "]: Wurde vom Channel gekickt von " + sUser;
+
+                    for (ChannelList::const_iterator itr2 = channels.begin(); itr2 != channels.end(); ++itr2)
+                    {
+                        if (itr2->uiOptions & OPTION_DISPLAY_KICKS)
+                            SendToWoWChannel(itr2->sChannel, sMessage);
+                    }
+                }
+            }
+        }
+        else if (sCommand == "001")
+        {
+            /* Authenticate to host
+             */
+            switch (m_uiAuth)
+            {
+                case AUTH_NO_AUTH:
+                    break;
+                case AUTH_NICKSERV_PW:
+                    SendToIRC("PRIVMSG nickserv :IDENTIFY " + m_sPass + "\n");
+                    break;
+                case AUTH_NICKSERV_USER_AND_PW:
+                    SendToIRC("PRIVMSG nickserv :IDENTIFY " + m_sNick + " " + m_sPass + "\n");
+                    break;
+                default:
+                    sLog.outError("mangChat: Unknown auth method '%u' with host '%s'", m_uiAuth, m_sHost.c_str());
+                    break;
+            }
+
+            /* Join all defined IRC Channels
+             */
+            list<string> lJoinedIRCChannels;
+
+            for (ChannelLinkMap::const_iterator itr = m_mWoWLinks.begin(); itr != m_mWoWLinks.end(); ++itr)
+            {
+                ChannelList channels = itr->second;
+
+                for (ChannelList::const_iterator itr2 = channels.begin(); itr2 != channels.end(); ++itr2)
+                {
+                    if (find(lJoinedIRCChannels.begin(), lJoinedIRCChannels.end(), itr2->sChannel) == lJoinedIRCChannels.end())
+                    {
+                        SendToIRC("JOIN #" + itr2->sChannel + "\n");
+                        lJoinedIRCChannels.push_back(itr2->sChannel);
+                    }
+                }
+            }
+
+            for (ChannelLinkMap::const_iterator itr = m_mIRCLinks.begin(); itr != m_mIRCLinks.end(); ++itr)
+            {
+                if (find(lJoinedIRCChannels.begin(), lJoinedIRCChannels.end(), itr->first) == lJoinedIRCChannels.end())
+                {
+                    SendToIRC("JOIN #" + itr->first + "\n");
+                    lJoinedIRCChannels.push_back(itr->first);
+                }
+            }
+        }
+    }
+}
diff --git a/src/game/mangchat/IRCMgr.cpp b/src/game/mangchat/IRCMgr.cpp
new file mode 100644
index 0000000..3c7a94c
--- /dev/null
+++ b/src/game/mangchat/IRCMgr.cpp
@@ -0,0 +1,136 @@
+/*
+ * MangChat for MaNGOS, the open source MMORPG-server
+ *
+ * This Program Is Free Software; You Can Redistribute It And/Or Modify It Under The
+ * Terms Of The GNU General Public License
+ *
+ * Written and Developed by Cybrax <cybraxvd@gmail.com>, |Death| <death@hell360.net>,
+ * Lice <lice@yeuxverts.net>, Dj_baby, Sanaell, Tase, Shinzon <shinzon@wowgollum.com>,
+ * Xeross, 3raZar3, the orangevirus team <www.orangevir.us>, ...
+ *
+ * Rewritten by kid10
+ *
+ * With Help And Support From The MaNGOS Project Community.
+ * PLEASE RETAIN THE COPYRIGHT OF THE AUTHORS.
+ */
+
+#include "IRCMgr.h"
+#include "Database/DatabaseEnv.h"
+
+#include "Policies/SingletonImp.h"
+INSTANTIATE_SINGLETON_1(IRCMgr);
+
+extern DatabaseType LoginDatabase;
+
+IRCMgr::IRCMgr()
+{
+}
+
+IRCMgr::~IRCMgr()
+{
+    for (ClientList::iterator itr = m_lClients.begin(); itr != m_lClients.end(); ++itr)
+        delete *itr;
+
+    m_lClients.clear();
+}
+
+void IRCMgr::Initialize()
+{
+    if (m_lClients.size())
+        return;
+
+    sLog.outString("%s\n%s\n%s\n%s",
+        "***************************************",
+        "**   MangChat Threaded IRC Client    **",
+        "**    rewrite by kid10 & wow4you     **",
+        "***************************************");
+
+    QueryResult* pResult = LoginDatabase.PQuery("SELECT mangchat_id, wow_channel, wow_channel_options, irc_channel, irc_channel_options FROM mangchat_links");
+
+    if (!pResult)
+    {
+        sLog.outErrorDb("mangChat: Could not load table 'mangchat_links'");
+        return;
+    }
+
+    typedef map<uint32, ChannelLinkMap> LinkedChannelsByService;
+
+    LinkedChannelsByService WoWLinkServiceMap;
+    LinkedChannelsByService IRCLinkServiceMap;
+
+    do
+    {
+        Field* pFields = pResult->Fetch();
+
+        uint32 uiId = pFields[0].GetUInt32();
+        string sWoWChannel = pFields[1].GetCppString();
+        uint16 uiWoWChannelOptions = pFields[2].GetUInt16();
+        string sIRCChannel = pFields[3].GetCppString();
+        uint16 uiIRCChannelOptions = pFields[4].GetUInt16();
+
+        if (uiWoWChannelOptions & OPTION_LINK_WITH_OTHER_CHANNEL)
+            WoWLinkServiceMap[uiId][sWoWChannel].push_back(MangChatChannel(sIRCChannel, uiIRCChannelOptions));
+
+        if (uiIRCChannelOptions & OPTION_LINK_WITH_OTHER_CHANNEL)
+            IRCLinkServiceMap[uiId][sIRCChannel].push_back(MangChatChannel(sWoWChannel, uiWoWChannelOptions));
+    }
+    while (pResult->NextRow());
+
+    delete pResult;
+
+    pResult = LoginDatabase.PQuery("SELECT id, host, port, user, pass, nick, auth FROM mangchat");
+
+    if (!pResult)
+    {
+        sLog.outErrorDb("mangChat: Could not load table 'mangchat'");
+        return;
+    }
+
+    sLog.outString("Set up %u mangChat connections...", pResult->GetRowCount());
+
+    do
+    {
+        Field* pFields = pResult->Fetch();
+
+        uint32 uiId = pFields[0].GetUInt32();
+
+        ChannelLinkMap WoWChannelLinks;
+        LinkedChannelsByService::const_iterator itr = WoWLinkServiceMap.find(uiId);
+
+        if (itr != WoWLinkServiceMap.end())
+            WoWChannelLinks = itr->second;
+
+        ChannelLinkMap IRCChannelLinks;
+        itr = IRCLinkServiceMap.find(uiId);
+
+        if (itr != IRCLinkServiceMap.end())
+            IRCChannelLinks = itr->second;
+
+        if (!WoWChannelLinks.size() && !IRCChannelLinks.size())
+        {
+            sLog.outErrorDb("mangChat: No channels linked in table 'mangchat_links' for Id '%u'", uiId);
+            continue;
+        }
+
+        uint8 uiAuth = pFields[6].GetUInt8();
+
+        if (uiAuth >= MAX_AUTH_METHODS)
+        {
+            sLog.outErrorDb("mangChat: Unknown auth method '%u' for Id '%u'", uiAuth, uiId);
+            continue;
+        }
+
+        IRCClient* pClient = new IRCClient(pFields[1].GetCppString(), pFields[2].GetInt32(), pFields[3].GetCppString(), pFields[4].GetCppString(),
+            pFields[5].GetCppString(), WoWChannelLinks, IRCChannelLinks, uiAuth);
+
+        m_lClients.push_back(pClient);
+
+        /* Start IRC Thread
+         */
+        ACE_Based::Thread irc(pClient);
+        irc.setPriority(ACE_Based::High);
+    }
+    while (pResult->NextRow());
+
+    delete pResult;
+}
diff --git a/src/game/mangchat/IRCMgr.h b/src/game/mangchat/IRCMgr.h
new file mode 100644
index 0000000..b64018b
--- /dev/null
+++ b/src/game/mangchat/IRCMgr.h
@@ -0,0 +1,50 @@
+/*
+ * MangChat for MaNGOS, the open source MMORPG-server
+ *
+ * This Program Is Free Software; You Can Redistribute It And/Or Modify It Under The
+ * Terms Of The GNU General Public License
+ *
+ * Written and Developed by Cybrax <cybraxvd@gmail.com>, |Death| <death@hell360.net>,
+ * Lice <lice@yeuxverts.net>, Dj_baby, Sanaell, Tase, Shinzon <shinzon@wowgollum.com>,
+ * Xeross, 3raZar3, the orangevirus team <www.orangevir.us>, ...
+ *
+ * Rewritten by kid10
+ *
+ * With Help And Support From The MaNGOS Project Community.
+ * PLEASE RETAIN THE COPYRIGHT OF THE AUTHORS.
+ */
+
+#ifndef _IRC_MGR_H
+#define _IRC_MGR_H
+
+#include "IRCClient.h"
+#include "../Player.h"
+#include "Policies/Singleton.h"
+
+enum ChannelAction
+{
+    ACTION_JOIN_CHANNEL = 1,
+    ACTION_LEAVE_CHANNEL = 2
+};
+
+using namespace std;
+
+typedef list<IRCClient*> ClientList;
+
+// IRCMgr main class
+class IRCMgr
+{
+    public:
+        IRCMgr();
+        ~IRCMgr();
+
+        void Initialize();
+
+        void HandleWoWChannelAction(string sChannel, ChannelAction action, Player* pPlayer);
+        void HandleWoWChannelAction(string sChannel, string sMessage, Player* pPlayer);
+
+    private:
+        ClientList m_lClients;
+};
+#endif
+#define sIRCMgr MaNGOS::Singleton<IRCMgr>::Instance()
diff --git a/src/game/mangchat/IRCSock.cpp b/src/game/mangchat/IRCSock.cpp
new file mode 100644
index 0000000..e2827fe
--- /dev/null
+++ b/src/game/mangchat/IRCSock.cpp
@@ -0,0 +1,134 @@
+/*
+ * MangChat for MaNGOS, the open source MMORPG-server
+ *
+ * This Program Is Free Software; You Can Redistribute It And/Or Modify It Under The
+ * Terms Of The GNU General Public License
+ *
+ * Written and Developed by Cybrax <cybraxvd@gmail.com>, |Death| <death@hell360.net>,
+ * Lice <lice@yeuxverts.net>, Dj_baby, Sanaell, Tase, Shinzon <shinzon@wowgollum.com>,
+ * Xeross, 3raZar3, the orangevirus team <www.orangevir.us>, ...
+ *
+ * Rewritten by kid10
+ *
+ * With Help And Support From The MaNGOS Project Community.
+ * PLEASE RETAIN THE COPYRIGHT OF THE AUTHORS.
+ */
+
+#include "IRCClient.h"
+#include "../../shared/Log.h"
+
+bool IRCClient::InitSock()
+{
+    #ifdef _WIN32
+    WSADATA wsaData;                                        //WSAData
+    if(WSAStartup(MAKEWORD(2,0),&wsaData) != 0)
+    {
+        sLog.outError("IRC Error: Winsock Initialization Error");
+        return false;
+    }
+    #endif
+    if ((SOCKET = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP)) == -1)
+    {
+        sLog.outError("IRC Error: Socket Error");
+        return false;
+    }
+    int on = 1;
+    if ( setsockopt ( SOCKET, SOL_SOCKET, SO_REUSEADDR, ( const char* ) &on, sizeof ( on ) ) == -1 )
+    {
+        sLog.outError("IRC Error: Invalid Socket");
+        return false;
+    }
+    #ifdef _WIN32
+    u_long iMode = 0;
+    ioctlsocket(SOCKET, FIONBIO, &iMode);
+    #else
+    fcntl(SOCKET, F_SETFL, O_NONBLOCK);                // set to non-blocking
+    fcntl(SOCKET, F_SETFL, O_ASYNC);                   // set to asynchronous I/O
+    #endif
+    return true;
+}
+
+bool IRCClient::Connect(const char* cHost, int nPort)
+{
+    m_bConnected = false;
+
+    struct hostent *he;
+    if ((he=gethostbyname(cHost)) == NULL)
+    {
+        sLog.outError("IRCLIENT: Could not resolve host: %s", cHost);
+        return false;
+    }
+    struct sockaddr_in their_addr;
+    their_addr.sin_family = AF_INET;
+    their_addr.sin_port = htons(nPort);
+    their_addr.sin_addr = *((struct in_addr *)he->h_addr);
+    memset(&(their_addr.sin_zero), '\0', 8);
+    if (::connect(SOCKET, (struct sockaddr *)&their_addr, sizeof(struct sockaddr)) == -1)
+    {
+        sLog.outError("IRCLIENT: Cannot connect to %s", cHost);
+        return false;
+    }
+    //FD_ZERO(&sfdset);
+    //FD_SET(SOCKET,&sfdset);
+
+    m_bConnected = true;
+
+    return true;
+}
+
+bool IRCClient::Login(std::string sNick, std::string sUser, std::string sPass)
+{
+    char hostname[128];
+    gethostname(hostname, sizeof(hostname));
+
+    if (SendToIRC("HELLO\n"))
+        if (SendToIRC("PASS " + sPass + "\n"))
+            if (SendToIRC("NICK " + sNick + "\n"))
+                if (SendToIRC("USER " + sUser + " " + hostname + " " + sNick + " :" + sNick + "\n"))
+                    return true;
+
+    return false;
+}
+
+void IRCClient::SockRecv()
+{
+    char szBuffer[512]; // Max Data Size
+
+    memset(szBuffer, 0, 512);
+
+    int nBytesRecv = ::recv(SOCKET, szBuffer, 512 - 1, 0 );
+    if (nBytesRecv == -1)
+    {
+        sLog.outError("Connection lost.");
+        m_bConnected = false;
+    }
+    else
+    {
+        if (-1 == nBytesRecv)
+        {
+            sLog.outError("Error occurred while receiving from socket.");
+        }
+        else
+        {
+            std::string reply;
+            std::istringstream iss(szBuffer);
+            while (getline(iss, reply))
+            {
+                HandleReceivedData(reply);
+            }
+        }
+    }
+}
+
+void IRCClient::Disconnect()
+{
+    if (SOCKET)
+    {
+        #ifdef _WIN32
+        closesocket(SOCKET);
+        //WSACleanup();
+        #else
+        close(SOCKET);
+        #endif
+    }
+}
diff --git a/win/VC100/game.vcxproj b/win/VC100/game.vcxproj
index e814587..cbf01bd 100644
--- a/win/VC100/game.vcxproj
+++ b/win/VC100/game.vcxproj
@@ -418,6 +418,10 @@
     <ClCompile Include="..\..\src\game\LootMgr.cpp" />
     <ClCompile Include="..\..\src\game\Mail.cpp" />
     <ClCompile Include="..\..\src\game\MailHandler.cpp" />
+    <ClCompile Include="..\..\src\game\mangchat\IRCClient.cpp" />
+    <ClCompile Include="..\..\src\game\mangchat\IRCHandler.cpp" />
+    <ClCompile Include="..\..\src\game\mangchat\IRCMgr.cpp" />
+    <ClCompile Include="..\..\src\game\mangchat\IRCSock.cpp" />
     <ClCompile Include="..\..\src\game\Map.cpp" />
     <ClCompile Include="..\..\src\game\MapManager.cpp" />
     <ClCompile Include="..\..\src\game\MapPersistentStateMgr.cpp" />
@@ -586,6 +590,8 @@
     <ClInclude Include="..\..\src\game\Language.h" />
     <ClInclude Include="..\..\src\game\LootMgr.h" />
     <ClInclude Include="..\..\src\game\Mail.h" />
+    <ClInclude Include="..\..\src\game\mangchat\IRCClient.h" />
+    <ClInclude Include="..\..\src\game\mangchat\IRCMgr.h" />
     <ClInclude Include="..\..\src\game\Map.h" />
     <ClInclude Include="..\..\src\game\MapManager.h" />
     <ClInclude Include="..\..\src\game\MapPersistentStateMgr.h" />
diff --git a/win/VC100/game.vcxproj.filters b/win/VC100/game.vcxproj.filters
index 22e1446..f2af62f 100644
--- a/win/VC100/game.vcxproj.filters
+++ b/win/VC100/game.vcxproj.filters
@@ -40,6 +40,9 @@
     <Filter Include="Warden">
       <UniqueIdentifier>{d88fe105-61c5-46b8-b008-c467a7b1b202}</UniqueIdentifier>
     </Filter>
+    <Filter Include="MangChat">
+      <UniqueIdentifier>{10b97d47-328c-472d-bfca-20bb3b61df9e}</UniqueIdentifier>
+    </Filter>
   </ItemGroup>
   <ItemGroup>
     <ClCompile Include="..\..\src\game\AccountMgr.cpp">
@@ -532,6 +535,18 @@
     <ClCompile Include="..\..\src\game\Warden\WardenWin.cpp">
       <Filter>Warden</Filter>
     </ClCompile>
+    <ClCompile Include="..\..\src\game\mangchat\IRCClient.cpp">
+      <Filter>MangChat</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\src\game\mangchat\IRCSock.cpp">
+      <Filter>MangChat</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\src\game\mangchat\IRCHandler.cpp">
+      <Filter>MangChat</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\src\game\mangchat\IRCMgr.cpp">
+      <Filter>MangChat</Filter>
+    </ClCompile>
   </ItemGroup>
   <ItemGroup>
     <ClInclude Include="..\..\src\game\AccountMgr.h">
@@ -1012,5 +1027,11 @@
     <ClInclude Include="..\..\src\game\Warden\WardenWin.h">
       <Filter>Warden</Filter>
     </ClInclude>
+    <ClInclude Include="..\..\src\game\mangchat\IRCClient.h">
+      <Filter>MangChat</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\src\game\mangchat\IRCMgr.h">
+      <Filter>MangChat</Filter>
+    </ClInclude>
   </ItemGroup>
 </Project>
\ No newline at end of file
-- 
1.7.2.5

